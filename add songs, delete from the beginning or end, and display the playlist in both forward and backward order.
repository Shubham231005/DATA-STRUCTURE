#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
    char title[100];
    struct node *next;
    struct node *prev;
};

// Function to insert a song at the beginning of the playlist
void insertion_at_begin(struct node **head) {
    char song[100];
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));

    printf("Enter the song: \n");
    scanf("%s", song);
    
    strcpy(temp->title, song);  // Copy the song title

    temp->next = *head;  // Link the new node to the existing list
    temp->prev = NULL;   // Set the prev pointer of the new node to NULL

    if (*head != NULL) {
        (*head)->prev = temp;  // Set the previous pointer of the old head to the new node
    }

    *head = temp;  // Update head to point to the new node
}

// Function to delete the first node from the playlist
void delete_from_begin(struct node **head) {
    if (*head == NULL) {
        printf("The playlist is already empty!\n");
        return;
    }

    struct node *temp = *head;
    *head = (*head)->next;  // Move head to the next node
    
    if (*head != NULL) {
        (*head)->prev = NULL;  // Set the prev of new head to NULL
    }
    
    free(temp);  // Free the old head node
    printf("First song deleted successfully.\n");
}

// Function to delete the last node from the playlist
void delete_from_end(struct node **head) {
    if (*head == NULL) {
        printf("The playlist is already empty!\n");
        return;
    }

    struct node *temp = *head;

    // If there's only one node in the list
    if (temp->next == NULL) {
        *head = NULL;
        free(temp);
        printf("Last song deleted successfully.\n");
        return;
    }

    // Traverse to the last node
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Unlink the last node and update the second-to-last node's next to NULL
    temp->prev->next = NULL;
    free(temp);
    printf("Last song deleted successfully.\n");
}

// Function to display the playlist from start to end
void display_forward(struct node *head) {
    if (head == NULL) {
        printf("The playlist is empty!\n");
        return;
    }

    printf("PLAYLIST (Forward):\n");
    struct node *p = head;
    while (p != NULL) {
        printf("%s\n", p->title);
        p = p->next;
    }
}

// Function to display the playlist from end to start
void display_backward(struct node *head) {
    if (head == NULL) {
        printf("The playlist is empty!\n");
        return;
    }

    struct node *p = head;
    
    // Traverse to the last node
    while (p->next != NULL) {
        p = p->next;
    }

    // Now p is at the last node, traverse backward
    printf("PLAYLIST (Backward):\n");
    while (p != NULL) {
        printf("%s\n", p->title);
        p = p->prev;
    }
}

int main() {
    struct node *head = NULL;
    char choice;
    int operation;

    do {
        printf("\nSelect an operation:\n");
        printf("1. Add a song\n");
        printf("2. Delete the first song\n");
        printf("3. Delete the last song\n");
        printf("4. Display playlist forward\n");
        printf("5. Display playlist backward\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &operation);

        switch (operation) {
            case 1:
                insertion_at_begin(&head);
                break;
            case 2:
                delete_from_begin(&head);
                break;
            case 3:
                delete_from_end(&head);
                break;
            case 4:
                display_forward(head);
                break;
            case 5:
                display_backward(head);
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }

        if (operation != 6) {
            printf("Do you want to continue? (y/n): ");
            scanf(" %c", &choice);
        } else {
            choice = 'n';
        }

    } while (choice == 'y' || choice == 'Y');

    return 0;
}
